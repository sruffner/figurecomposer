package com.jmatio.io;


import java.io.*;
import java.lang.ref.WeakReference;
// import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
// import java.security.AccessController;
// import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.zip.InflaterInputStream;

import com.jmatio.common.MatDataTypes;
import com.jmatio.types.ByteStorageSupport;
import com.jmatio.types.MLArray;
import com.jmatio.types.MLCell;
import com.jmatio.types.MLChar;
import com.jmatio.types.MLDouble;
import com.jmatio.types.MLEmptyArray;
import com.jmatio.types.MLInt16;
import com.jmatio.types.MLInt32;
import com.jmatio.types.MLInt64;
import com.jmatio.types.MLInt8;
import com.jmatio.types.MLJavaObject;
import com.jmatio.types.MLNumericArray;
import com.jmatio.types.MLObject;
import com.jmatio.types.MLSingle;
import com.jmatio.types.MLSparse;
import com.jmatio.types.MLStructure;
import com.jmatio.types.MLUInt32;
import com.jmatio.types.MLUInt64;
import com.jmatio.types.MLUInt8;

/**
 * <h4>Modifications to original source (saruffner)</h4>
 * <p><b>11jul2013</b>: I modified MatFileReader so that I could use the JMatIO package to read in Matlab FIG files, 
 * which are really just MAT files in disguise. The original version would throw an exception in readMatrix() when it 
 * encountered a function handle -- Matlab arrays with the function handle type are included in FIG files (and can be 
 * in MAT files, too), but they are undocumented in the MAT file specification. I modified readMatrix() and readData()
 * to skip over data elements that correspond to function handles and report them as empty arrays.
 * <p>In addition, I added a checkForFigFile() function that looks at the first 136 bytes of a file to assess whether or
 * not it could be a Matlab FIG file containing the Handle Graphics object tree defining a single Matlab figure. FIG
 * files will contain only one root-level data element.</p>
 *
 * <p><b>17dec2013</b>: On trying to import a simple FIG file created by Matlab R2013b on Win8, readMatrix() threw an 
 * exception when it encountered the MLArray type mxOPAQUE_CLASS. This may represent serialized objects or anonymous
 * function handles; in any case, it is undocumented in the MAT file specification. As with function handles (see
 * changes dtd 11jul2013), I've now modified both readMatrix() and readData() to skip over elements with ML array type
 * mxOPAQUE_CLASS and report them as empty arrays.
 * <p>In addition, the FIG file generated by Matlab R2013b on Win8 contained a second root-level data element, a uint8
 * array with tag name "@". As a result, we had to weaken the constraints enforced in checkForFigFileLevel5().</p>
 *
 * <p><b>27feb2020</b>: The default policy for reading the FIG file is to map the file into system memory, {@link
 * #MEMORY_MAPPED_FILE}. However, after processing the file, the read() method calls clean() to release the underlying 
 * memory mapped resource. This method accesses JDK internal class sun.misc.Cleaner, which is no longer accessible as of
 * JDK 9. Furthermore, even if that class was invoked solely through reflection, JDK 9+ issues an "illegal reflective 
 * access" warning -- because the JDK internal package could eventually go away or break dependent code in a future 
 * release.</p>
 * <p>To ensure I can use MatFileReader running in a Java 9 or better runtime, I decided to remove the clean() method
 * and rely on the GC to release a memory-mapped file. Furthermore, I'm using {@link #DIRECT_BYTE_BUFFER} instead of
 * {@link #MEMORY_MAPPED_FILE} as the default memory policy. I also removed any classes related to writing a MAT file.
 * So, this "dumbed-down" version of JMatIO is only for reading MAT files of moderate size!</p>
 *
 * <p><b>02jul2024</b>: Made changes in MatFileReader and MatFileInputStream to support reading UTF16/32 fields -- as a
 * basic FIG file generated by Matlab R2024a contained such fields. Never encountered this with FIG files generated
 * by R2014, R2016, and R2019b. These changes were based on the
 * (<a href="https://github.com/diffplug/matfilerw">MATFILERW package</a>), which was forked from JMatIO. Also,
 * modified readData() to ignore EOF exception when decompressing a MatDataTypes.miCOMPRESSED field.</p>
 * -------------------------------------------------------------------------------------------------------------------
 * <p> 
 * MAT-file reader. Reads MAT-file into <code>MLArray</code> objects.
 * <p> 
 * Usage:
 * <pre><code>
 * //read in the file
 * MatFileReader mfr = new MatFileReader( "mat_file.mat" );
 * <p> 
 * //get array of a name "my_array" from file
 * MLArray mlArrayRetrived = mfr.getMLArray( "my_array" );
 * <p> 
 * //or get the collection of all arrays that were stored in the file
 * Map content = mfr.getContent();
 * </pre></code>
 * <p> 
 * @see MatFileFilter
 * @author Wojciech Gradkowski (<a href="mailto:wgradkowski@gmail.com">wgradkowski@gmail.com</a>)
 */
public class MatFileReader
{
   /**
    * Is the specified file's content consistent with that of a Matlab Level 5 FIG file? The FIG file is a Level 5 MAT 
    * file containing the Handle Graphics object hierarchy for a single Matlab figure. As such, it is expected to have
    * a valid Level 5 header and at least one root-level data element. This method reads in the first 136 bytes of the file
    * and checks whether or not the 128-byte header and the 8-byte tag of the first data element satisfy these 
    * constraints. It does NOT read the entire file, so it should be fairly fast.
    * <p>Originally, the method required that the file contain a SINGLE root-level data element. That constraint is no
    * longer enforced because FIG files generated by Matlab R2013b in Win8 appear to tack on another root-level element,
    * a uint8 array with tag name "@".</p>
    * 
    * @param f Pathname of file to test.
    * @return True if first 136 bytes of file satisfy conditions for a Level 5 FIG file, as described.
    */
   public static boolean checkForFigFileLevel5(File f)
   {
      if(f == null || !f.isFile()) return(false);
      
      ByteBuffer bb = ByteBuffer.allocate(136);
      ByteOrder byteOrder = ByteOrder.nativeOrder();
      bb.clear();
      bb.order(byteOrder);
      
      boolean isFig;
      try(RandomAccessFile raf = new RandomAccessFile(f, "r"))
      {
         FileChannel fc = raf.getChannel();
         bb.limit(136);
         if(136 != fc.read(bb)) throw new IOException("Not a MAT file, or file read error");
         bb.position(0);

         //descriptive text in first 116 bytes of header. It must start with "MATLAB 5.0 MAT-file".
         byte[] descBuf = new byte[116];
         bb.get(descBuf);
         int len = 0;
         while(len < descBuf.length && descBuf[len] != 0) ++len;

         String description = new String(descBuf, 0, len);
         if(!description.matches("MATLAB 5.0 MAT-file.*")) throw new IOException("not a Level 5 MAT file");

         // skip next 8 bytes (subsystem data offset)
         bb.position(bb.position() + 8);

         // get 2 bytes holding version number
         byte[] bversion = new byte[2];
         bb.get(bversion);

         // get 2-byte endian indicator 2 bytes
         byte[] endianIndicator = new byte[2];
         bb.get(endianIndicator);

         // check endianness and fix byte order if necessary. Also check version number once we know byte order.
         int version;
         if((char) endianIndicator[0] == 'I' && (char) endianIndicator[1] == 'M')
         {
            byteOrder = ByteOrder.LITTLE_ENDIAN;
            version = bversion[1] & 0xff | bversion[0] << 8;
         } else
         {
            byteOrder = ByteOrder.BIG_ENDIAN;
            version = bversion[0] & 0xff | bversion[1] << 8;
         }
         bb.order(byteOrder);
         if(version != 1) throw new IOException("not a Level 5 MAT file");

         // check last 8 bytes = tag for first data element
         int dataType = bb.getInt();
         int dataSize = bb.getInt();

         // expect first element to be one of two data types
         isFig = (dataType == MatDataTypes.miCOMPRESSED || dataType == MatDataTypes.miMATRIX);

         // verify that the file size is greater than or equal to the sizes of the fixed header and the first element.
         if(isFig) isFig = (fc.size() >= (136 + dataSize));
      }
      catch(Exception e)
      {
         isFig = false;
      }

      return(isFig);
   }
   
    public static final int MEMORY_MAPPED_FILE = 1;
    public static final int DIRECT_BYTE_BUFFER = 2;
    public static final int HEAP_BYTE_BUFFER   = 4;
    
    /**
     * MAT-file header
     */
    private MatFileHeader matFileHeader;
    /**
     * Container for red <code>MLArray</code>s
     */
    private final Map<String, MLArray> data;
    /**
     * Tells how bytes are organized in the buffer.
     */
    private ByteOrder byteOrder;
    /**
     * Array name filter
     */
    private MatFileFilter filter;
    /**
     * Creates instance of <code>MatFileReader</code> and reads MAT-file 
     * from location given as <code>fileName</code>.
     * <p> 
     * This method reads MAT-file without filtering.
     * 
     * @param fileName the MAT-file path <code>String</code>
     * @throws IOException when error occurred while processing the file.
     */
    public MatFileReader(String fileName) throws IOException
    {
        this ( new File(fileName), new MatFileFilter() );
    }
    /**
     * Creates instance of <code>MatFileReader</code> and reads MAT-file 
     * from location given as <code>fileName</code>.
     * <p> 
     * Results are filtered by <code>MatFileFilter</code>. Arrays that do not meet
     * filter match condition will not be available in results.
     * 
     * @param fileName the MAT-file path <code>String</code>
     * @param filter Array name filter.
     * @throws IOException when error occurred while processing the file.
     */
    public MatFileReader(String fileName, MatFileFilter filter ) throws IOException
    {
        this( new File(fileName), filter );
    }
    /**
     * Creates instance of <code>MatFileReader</code> and reads MAT-file 
     * from <code>file</code>. 
     * <p> 
     * This method reads MAT-file without filtering.
     * 
     * @param file the MAT-file
     * @throws IOException when error occurred while processing the file.
     */
    public MatFileReader(File file) throws IOException
    {
        this ( file, new MatFileFilter() );
        
    }
    /**
     * Creates instance of <code>MatFileReader</code> and reads MAT-file from
     * <code>file</code>.
     * <p>
     * Results are filtered by <code>MatFileFilter</code>. Arrays that do not
     * meet filter match condition will not be available in results.
     * <p>
     * <i>Note: this method reads file using the direct byte buffer memory policy, see
     * notes to </code>{@link #read(File, MatFileFilter, int)}</code>
     * 
     * @param file The MAT-file
     * @param filter array name filter.
     * @throws IOException
     *             when error occurred while processing the file.
     */
    public MatFileReader(File file, MatFileFilter filter) throws IOException
    {
        this();
        
        read(file, filter, DIRECT_BYTE_BUFFER);
    }
    
    public MatFileReader()
    {
        filter  = new MatFileFilter();
        data    = new LinkedHashMap<>();
    }
    
    /**
     * Reads the content of a MAT-file and returns the mapped content.
     * <p>
     * This method calls
     * <code>read(file, new MatFileFilter(), DIRECT_BYTE_BUFFER)</code>.
     * 
     * @param file
     *            a valid MAT-file file to be read
     * @return the same as <code>{@link #getContent()}</code>
     * @throws IOException
     *             if error occurs during file processing
     */
    public synchronized Map<String, MLArray> read(File file) throws IOException
    {
       return read(file, new MatFileFilter(), DIRECT_BYTE_BUFFER);
    }
    /**
     * Reads the content of a MAT-file and returns the mapped content.
     * <p>
     * This method calls
     * <code>read(file, new MatFileFilter(), policy)</code>.
     * 
     * @param file
     *            a valid MAT-file file to be read
     * @param policy
     *            the file memory allocation policy
     * @return the same as <code>{@link #getContent()}</code>
     * @throws IOException
     *             if error occurs during file processing
     */
    public synchronized Map<String, MLArray> read(File file, int policy) throws IOException
    {
        return read(file, new MatFileFilter(), policy);
    }

    private static final int DIRECT_BUFFER_LIMIT = 1 << 25;

    /**
     * Reads the content of a MAT-file and returns the mapped content.
     * <p>
     * Because of java bug <a
     * href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038">#4724038</a>
     * which disables releasing the memory mapped resource, additional different
     * allocation modes are available.
     * <ul>
     * <li><code>{@link #MEMORY_MAPPED_FILE}</code> - a memory mapped file</li>
     * <li><code>{@link #DIRECT_BYTE_BUFFER}</code> - a uses
     * <code>{@link ByteBuffer#allocateDirect(int)}</code> method to read in
     * the file contents</li>
     * <li><code>{@link #HEAP_BYTE_BUFFER}</code> - a uses
     * <code>{@link ByteBuffer#allocate(int)}</code> method to read in the
     * file contents</li>
     * </ul>
     * <i>Note: memory mapped file will try to invoke a nasty code to relase
     * it's resources</i>
     * 
     * @param file
     *            a valid MAT-file file to be read
     * @param filter
     *            the array filter applied during reading
     * @param policy
     *            the file memory allocation policy
     * @return the same as <code>{@link #getContent()}</code>
     * @see MatFileFilter
     * @throws IOException
     *             if error occurs during file processing
     */

    @SuppressWarnings("CommentedOutCode")
    public synchronized Map<String, MLArray> read(File file, MatFileFilter filter,
                                                  int policy) throws IOException
    {
        this.filter = filter;
        
        //clear the results
        for ( String key : data.keySet() )
        {
            data.remove(key);
        }

       ByteBuffer buf = null;
        WeakReference<MappedByteBuffer> bufferWeakRef = null;
       try(RandomAccessFile raFile = new RandomAccessFile(file, "r"); FileChannel roChannel = raFile.getChannel())
       {
          //Create a read-only memory-mapped file
          // until java bug #4715154 is fixed I am not using memory mapped files
          // The bug disables re-opening the memory mapped files for writing
          // or deleting until the VM stops working. In real life I need to open
          // and update files
          switch(policy)
          {
          case DIRECT_BYTE_BUFFER:
             buf = ByteBuffer.allocateDirect((int) roChannel.size());
             roChannel.read(buf, 0);
             buf.rewind();
             break;
          case HEAP_BYTE_BUFFER:
             int filesize = (int) roChannel.size();
             System.gc();
             buf = ByteBuffer.allocate(filesize);

             // The following two methods couldn't be used (at least under MS Windows)
             // since they are implemented in a suboptimal way. Each of them
             // allocates its own _direct_ buffer of exactly the same size,
             // the buffer passed as parameter has, reads data into it and
             // only afterwards moves data into the buffer passed as parameter.
             // roChannel.read(buf, 0);        // ends up in outOfMemory
             // raFile.readFully(buf.array()); // ends up in outOfMemory
             int numberOfBlocks = filesize / DIRECT_BUFFER_LIMIT + ((filesize % DIRECT_BUFFER_LIMIT) > 0 ? 1 : 0);
             if(numberOfBlocks > 1)
             {
                ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT);
                for(int block = 0; block < numberOfBlocks; block++)
                {
                   tempByteBuffer.clear();
                   roChannel.read(tempByteBuffer, (long) block * DIRECT_BUFFER_LIMIT);
                   tempByteBuffer.flip();
                   buf.put(tempByteBuffer);
                }
                //noinspection UnusedAssignment
                tempByteBuffer = null;
             } else
                roChannel.read(buf, 0);

             buf.rewind();
             break;
          case MEMORY_MAPPED_FILE:
             buf = roChannel.map(FileChannel.MapMode.READ_ONLY, 0, (int) roChannel.size());
             bufferWeakRef = new WeakReference<>((MappedByteBuffer) buf);
             break;
          default:
             throw new IllegalArgumentException("Unknown file allocation policy");
          }
          //read in file header
          readHeader(buf);

          while(buf.remaining() > 0)
          {
             readData(buf);
          }

          return getContent();
       }
       finally
       {
          //noinspection ConstantValue
          if(buf != null && bufferWeakRef != null && policy == MEMORY_MAPPED_FILE)
          {
                /* saruffner(27feb2020): Removed the clean() method. Rely on GC only.
                try
                {
                    clean(buf);
                }
                catch ( Exception e )
                { */
             int GC_TIMEOUT_MS = 1000;
             //noinspection UnusedAssignment
             buf = null;
             long start = System.currentTimeMillis();
             while(bufferWeakRef.get() != null)
             {
                if(System.currentTimeMillis() - start > GC_TIMEOUT_MS)
                {
                   break; //a hell cannot be unmapped - hopefully GC will
                   //do it's job later
                }
                System.gc();
                Thread.yield();
             }
             /* } */
          }
       }
        
    }
    
    /*
     * Workaround taken from bug <a
     * href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038">#4724038</a>
     * to release the memory mapped byte buffer.
     * <p>
     * Little quote from SUN: <i>This is highly inadvisable, to put it mildly.
     * It is exceedingly dangerous to forcibly unmap a mapped byte buffer that's
     * visible to Java code. Doing so risks both the security and stability of
     * the system</i>
     * <p>
     * Since the memory byte buffer used to map the file is not exposed to the
     * outside world, maybe it's save to use it without being cursed by the SUN.
     * Since there is no other solution this will do (don't trust voodoo GC
     * invocation)
     * 
     * @param buffer
     *            the buffer to be unmapped
     * @throws Exception
     *             all kind of evil stuff
     */
    /* saruffner(27feb2020) - Removed to avoid accessing JDK internal. 
    private void clean(final Object buffer) throws Exception
    {
        AccessController.doPrivileged(new PrivilegedAction<Object>()
        {
            public Object run()
            {
                try
                {
                    Method getCleanerMethod = buffer.getClass().getMethod(
                            "cleaner", new Class[0]);
                    getCleanerMethod.setAccessible(true);
                    sun.misc.Cleaner cleaner = (sun.misc.Cleaner) getCleanerMethod
                            .invoke(buffer, new Object[0]);
                    cleaner.clean();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
                return null;
            }
        });
    }
    */
    
    
    
    /**
     * Gets MAT-file header
     * 
     * @return - a <code>MatFileHeader</code> object
     */
    public MatFileHeader getMatFileHeader()
    {
        return matFileHeader;
    }
    /**
     * Returns list of <code>MLArray</code> objects that were inside MAT-file
     * 
     * @return - a <code>ArrayList</code>
     * @deprecated use <code>getContent</code> which returns a Map to provide 
     *             easier access to <code>MLArray</code>s contained in MAT-file
     */
    public ArrayList<MLArray> getData()
    {
        return new ArrayList<>(data.values());
    }
    /**
     * Returns the value to which the red file maps the specified array name.
     * <p> 
     * Returns <code>null</code> if the file contains no content for this name.
     * 
     * @param name array name
     * @return The <code>MLArray</code> to which this file maps the specified name,
     *           or null if the file contains no content for this name.
     */
    public MLArray getMLArray( String name )
    {
        return data.get( name );
    }
    /**
     * Returns a map of <code>MLArray</code> objects that were inside MAT-file.
     * <p> 
     * MLArrays are mapped with MLArrays' names
     *  
     * @return - a <code>Map</code> of MLArrays mapped with their names.
     */
    public Map<String, MLArray> getContent()
    {
        return data;
    }
    

    /**
     * Reads data form byte buffer. Searches for either
     * <code>miCOMPRESSED</code> data or <code>miMATRIX</code> data.
     * <p> 
     * Compressed data are inflated and the product is recursively passed back
     * to this same method.
     * <p> 
     * Modifies <code>buf</code> position.
     * 
     * @param buf -
     *            input byte buffer
     * @throws IOException when error occurs while reading the buffer.
     */
    @SuppressWarnings("ExtractMethodRecommender")
    private void readData(ByteBuffer buf ) throws IOException
    {
        //read data
        ISMatTag tag = new ISMatTag(buf);
        switch ( tag.type )
        {
            case MatDataTypes.miCOMPRESSED:
                int numOfBytes = tag.size;
                //inflate and recur
                if ( buf.remaining() < numOfBytes )
                {
                    throw new MatlabIOException("Compressed buffer length miscalculated!");
                }
                //instead of standard Inlater class instance I use an inflater input
                //stream... gives a great boost to the performance
                InflaterInputStream iis = new InflaterInputStream(new ByteBufferInputStream(buf, numOfBytes));
                
                //process data decompression
                byte[] result = new byte[1024];
                
                HeapBufferDataOutputStream dos = new HeapBufferDataOutputStream();
                int i;
                try
                {
                    do
                    {
                        i = iis.read(result, 0, result.length);
                        int len = Math.max(0, i);
                        dos.write(result, 0, len);
                    }
                    while ( i > 0 );
                }
                catch ( IOException e )
                {
                    // (sar, 02jul2024) Ignoring EOF exception fixed an issue with a FIG file created by Matlab 2024a.
                    if(!(e instanceof EOFException))
                       throw new MatlabIOException("Could not decompress data: " + e );
                }
                finally
                {
                    iis.close();
                    dos.flush();
                }
                //create a ByteBuffer from the deflated data
                ByteBuffer out = dos.getByteBuffer();
                
                //with proper byte ordering
                out.order( byteOrder );
                
                try
                {
                    readData( out );
                }
                finally
                {
                    dos.close();
                }
                break;
            case MatDataTypes.miMATRIX:
                
                //read in the matrix
                int pos = buf.position();
                
                MLArray element = readMatrix(buf, true, tag.size);
                
                if ( element != null && !data.containsKey( element.getName() ) )
                {
                    data.put( element.getName(), element );
                }
                else
                {
                    int red = buf.position() - pos;
                    int toread = tag.size - red;
                    buf.position( buf.position() + toread );
                }
                int red = buf.position() - pos;

                int toread = tag.size - red;
                
                if ( toread != 0 )
                {
                    throw new MatlabIOException("Matrix was not red fully! " + toread + " remaining in the buffer.");
                }
                break;
            default:
                throw new MatlabIOException("Incorrect data tag: " + tag);
                    
        }
    }
    
    /**
     * 16jul2013 (saruffner) : Modified to support skipping over any Matlab array representing a "function handle"
     * (Mathworks' MAT file specification does not document how this data type is stored). The method returns an empty
     * array in its place.
     * 16dec2013 (saruffner) : Same hack to deal with undocumented type MLArray.mxOPAQUE_CLASS...
     * -------------------------
     * <p> 
     * Reads miMATRIX from from input stream.
     * <p> 
     * If reading was not finished (which is normal for filtered results)
     * returns <code>null</code>.
     * <p> 
     * Modifies <code>buf</code> position to the position when reading
     * finished.
     * <p> 
     * Uses recursive processing for some ML**** data types.
     * 
     * @param buf Input byte buffer
     * @param isRoot When <code>true</code> informs that if this is a top level matrix
     * @param sz Size of the data element defining the matrix (not including that element's tag, which was already read.
     * @return <code>MLArray</code> or <code>null</code> if matrix does not match <code>filter</code>
     * @throws IOException when error occurs while reading the buffer.
     */
    @SuppressWarnings("DataFlowIssue")
    private MLArray readMatrix(ByteBuffer buf, boolean isRoot, int sz) throws IOException
    {
       // calculate buffer position immediately after matrix definition (so we can skip over it)
       int end = buf.position() + sz;
          
        //result
        MLArray mlArray;
        ISMatTag tag;
        
        //read flags
        int[] flags = readFlags(buf);
        int attributes = ( flags.length != 0 ) ? flags[0] : 0;
        int nzmax = ( flags.length != 0 ) ? flags[1] : 0;
        int type = attributes & 0xff;
        
        //read Array dimension
        int[] dims = readDimension(buf);
        
        //read array Name
        String name = readName(buf);
        
        //if this array is filtered out return immediately
        if ( isRoot && !filter.matches(name) )
        {
            return null;
        }

        // skip over function handle -- return an empty array if not at root level
        if(type == MLArray.mxFUNCTION_CLASS || type == MLArray.mxOPAQUE_CLASS)
        {
           if(isRoot) return(null);
           else
           {
              buf.position(end);
              return( new MLArray(name, dims, type, attributes));
           }
        }
        
        //read data >> consider changing it to stategy pattern
        MLStructure struct;
        int maxLen, numOfFields;
        String[] fieldNames;
        String className;
        switch ( type )
        {
            case MLArray.mxSTRUCT_CLASS:
                
                struct = new MLStructure(name, dims, type, attributes);
                
                //field name lenght - this subelement always uses the compressed data element format
               //noinspection UnusedAssignment
               tag = new ISMatTag(buf);
                maxLen = buf.getInt(); //maximum field length

                //////  read fields data as Int8
                tag = new ISMatTag(buf);
                //calculate number of fields
                numOfFields = tag.size/maxLen;
                
                fieldNames = new String[numOfFields];
                for ( int i = 0; i < numOfFields; i++ )
                {
                    byte[] names = new byte[maxLen];
                    buf.get(names);
                    fieldNames[i] = zeroEndByteArrayToString(names);
                }
                buf.position( buf.position() + tag.padding );
                //read fields
                for ( int index = 0; index < struct.getM()*struct.getN(); index++ )
                {
                    for ( int i = 0; i < numOfFields; i++ )
                    {
                        //read matrix recursively
                        tag = new ISMatTag(buf);
                        
                        if ( tag.size > 0 )
                        {
                            MLArray fieldValue = readMatrix(buf, false, tag.size);
                            struct.setField(fieldNames[i], fieldValue, index);
                        }
                        else
                        {
                            struct.setField(fieldNames[i], new MLEmptyArray(), index);
                        }
                    }
                }
                mlArray = struct;
                break;
            case MLArray.mxCELL_CLASS:
                MLCell cell = new MLCell(name, dims, type, attributes);
                for ( int i = 0; i < cell.getM()*cell.getN(); i++ )
                {
                    tag = new ISMatTag(buf);
                    if ( tag.size > 0 )
                    {
                        //read matrix recursively
                        MLArray cellmatrix = readMatrix(buf, false, tag.size);
                        cell.set(cellmatrix, i);
                    }
                    else
                    {
                        cell.set(new MLEmptyArray(), i);
                    }
                }
                mlArray = cell;
                break;
            case MLArray.mxDOUBLE_CLASS:
                mlArray = new MLDouble(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxSINGLE_CLASS:
                mlArray = new MLSingle(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxUINT8_CLASS:
                mlArray = new MLUInt8(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
//System.out.println(  new String( buf.array() ) );   
                break;
            case MLArray.mxINT8_CLASS:
                mlArray = new MLInt8(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxINT16_CLASS:
                mlArray = new MLInt16(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxINT32_CLASS:                
                mlArray = new MLInt32(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxUINT32_CLASS:                
                mlArray = new MLUInt32(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxINT64_CLASS:
                mlArray = new MLInt64(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxUINT64_CLASS:
                mlArray = new MLUInt64(name, dims, type, attributes);
                //read real
                tag = new ISMatTag(buf);
                tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getRealByteBuffer(),
                                            (MLNumericArray<?>) mlArray );
                //read complex
                if ( mlArray.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    tag.readToByteBuffer( ((MLNumericArray<?>) mlArray).getImaginaryByteBuffer(),
                            (MLNumericArray<?>) mlArray );
                }
                break;
            case MLArray.mxCHAR_CLASS:
                MLChar mlchar = new MLChar(name, dims, type, attributes);
                
                //read real
                tag = new ISMatTag(buf);
//                char[] ac = tag.readToCharArray();
                String str = tag.readToString(byteOrder);

                for ( int i = 0; i < str.length(); i++ )
                {
                    mlchar.setChar( str.charAt(i), i );
                }
                mlArray = mlchar;
                break;
            case MLArray.mxSPARSE_CLASS:
                MLSparse sparse = new MLSparse(name, dims, attributes, nzmax);
                //read ir (row indices)
                tag = new ISMatTag(buf);
                int[] ir = tag.readToIntArray();
                //read jc (column count)
                tag = new ISMatTag(buf);
                int[] jc = tag.readToIntArray();
                
                //read pr (real part)
                tag = new ISMatTag(buf);
                double[] ad1 = tag.readToDoubleArray();
                int count = 0;
                for (int column = 0; column < sparse.getN(); column++) {
                    while(count < jc[column+1]) {
                        sparse.setReal(ad1[count], ir[count], column);
                        count++;
                    }
                }
                
                //read pi (imaginary part)
                if ( sparse.isComplex() )
                {
                    tag = new ISMatTag(buf);
                    double[] ad2 = tag.readToDoubleArray();
                    
                    count = 0;
                    for (int column = 0; column < sparse.getN(); column++) {
                        while(count < jc[column+1]) {
                            sparse.setImaginary(ad2[count], ir[count], column);
                            count++;
                        }
                    }
                }
                mlArray = sparse;
                break;

            case MLArray.mxOPAQUE_CLASS:
                //read class name
                tag = new ISMatTag(buf);
                // class name
                className = tag.readToString(byteOrder);
//                System.out.println( "Class name: " + className );
                // should be "java"
//                System.out.println( "Array name: " + name );
                
                // the stored array name 
                // read array name stored in dims (!)
                byte[] nn = new byte[dims.length];
                for ( int i = 0; i < dims.length; i++ )
                {
                    nn[i] = (byte)dims[i];
                }
                String arrName = new String(nn);
//                System.out.println( "Array name: " + arrName );
                
                // next tag should be miMatrix
                ISMatTag contentTag = new ISMatTag(buf);
                
                if ( contentTag.type == MatDataTypes.miMATRIX )
                {
                    // should return UInt8
                    MLUInt8 content = (MLUInt8) readMatrix(buf, false, contentTag.size);
                    
                    // de-serialize object
                   try(ObjectInputStream ois = new ObjectInputStream(
                         new ByteBufferInputStream(content.getRealByteBuffer(),
                               content.getRealByteBuffer().limit())))
                   {
                      Object o = ois.readObject();
                      mlArray = new MLJavaObject(arrName, className, o);
                   } catch(Exception e)
                   {
                      throw new IOException(e);
                   }
                }
                else
                {
                    throw new IOException("Unexpected java object content");
                }
                break;
            case MLArray.mxOBJECT_CLASS:
                //read class name
                tag = new ISMatTag(buf);
                
                // class name
                className = tag.readToString(byteOrder);
                
                // TODO: currently copy pasted from structure
                
                struct = new MLStructure(name, dims, type, attributes);
                
                //field name lenght - this subelement always uses the compressed data element format
               //noinspection UnusedAssignment
               tag = new ISMatTag(buf);
                maxLen = buf.getInt(); //maximum field length
                
                //////  read fields data as Int8
                tag = new ISMatTag(buf);
                //calculate number of fields
                numOfFields = tag.size/maxLen;
                
                fieldNames = new String[numOfFields];
                for ( int i = 0; i < numOfFields; i++ )
                {
                    byte[] names = new byte[maxLen];
                    buf.get(names);
                    fieldNames[i] = zeroEndByteArrayToString(names);
                }
    
                buf.position( buf.position() + tag.padding );
                //read fields
                for ( int index = 0; index < 1; index++ )
                {
                    for ( int i = 0; i < numOfFields; i++ )
                    {
                        //read matrix recursively
                        tag = new ISMatTag(buf);

                        if ( tag.size > 0 )
                        {
                            MLArray fieldValue = readMatrix(buf, false, tag.size);
                            struct.setField( fieldNames[i], fieldValue, index );
                        }
                        else
                        {
                            struct.setField(fieldNames[i], new MLEmptyArray(), index);
                        }
                    }
                }
                
                mlArray = new MLObject( name, className, struct );
                break;
            default:
                throw new MatlabIOException("Incorrect matlab array class: " + MLArray.typeToString(type) );
               
        }
        return mlArray;
    }

    /**
     * Converts byte array to <code>String</code>. 
     * <p> 
     * It assumes that String ends with \0 value.
     * 
     * @param bytes byte array containing the string.
     * @return String retrieved from byte array.
     */
    private String zeroEndByteArrayToString(byte[] bytes)
    {
        int len = 0;
        while((len < bytes.length) && (bytes[len] != 0)) ++len;
        
        return new String( bytes, 0, len );
        
    }
    /**
     * Reads Matrix flags.
     * <p> 
     * Modifies <code>buf</code> position.
     * 
     * @param buf <code>ByteBuffer</code>
     * @return flags int array
     */
    private int[] readFlags(ByteBuffer buf)
    {
        ISMatTag tag = new ISMatTag(buf);

       return tag.readToIntArray();
    }
    /**
     * Reads Matrix dimensions.
     * <p> 
     * Modifies <code>buf</code> position.
     * 
     * @param buf <code>ByteBuffer</code>
     * @return dimensions int array
     */
    private int[] readDimension(ByteBuffer buf )
    {
        
        ISMatTag tag = new ISMatTag(buf);
       return tag.readToIntArray();
        
    }
    /**
     * Reads Matrix name.
     * <p> 
     * Modifies <code>buf</code> position.
     * 
     * @param buf <code>ByteBuffer</code>
     * @return name <code>String</code>
     */
    private String readName(ByteBuffer buf) throws IOException
    {
        ISMatTag tag = new ISMatTag(buf);
        return tag.readToString(byteOrder);
    }
    /**
     * Reads MAT-file header.
     * <p> 
     * Modifies <code>buf</code> position.
     * 
     * @param buf
     *            <code>ByteBuffer</code>
     * @throws IOException
     *             if reading from buffer fails or if this is not a valid
     *             MAT-file
     */
    private void readHeader(ByteBuffer buf) throws IOException
    {
        //header values
        String description;
        int version;
        byte[] endianIndicator = new byte[2];
        
        //descriptive text 116 bytes
        byte[] descriptionBuffer = new byte[116];
        buf.get(descriptionBuffer);
        
        description = zeroEndByteArrayToString(descriptionBuffer);
        
        if ( !description.matches("MATLAB 5.0 MAT-file.*") )
        {
            throw new MatlabIOException("This is not a valid MATLAB 5.0 MAT-file.");
        }
        
        //subsyst data offset 8 bytes
        buf.position( buf.position() + 8);
        
        byte[] bversion = new byte[2];
        //version 2 bytes
        buf.get(bversion);
        
        //endian indicator 2 bytes
        buf.get(endianIndicator);
        
        //program reading the MAT-file must perform byte swapping to interpret the data
        //in the MAT-file correctly
        if ( (char)endianIndicator[0] == 'I' && (char)endianIndicator[1] == 'M')
        {
            byteOrder = ByteOrder.LITTLE_ENDIAN;
            version = bversion[1] & 0xff | bversion[0] << 8;
        }
        else
        {
            byteOrder = ByteOrder.BIG_ENDIAN;
            version = bversion[0] & 0xff | bversion[1] << 8;
        }
        
        buf.order( byteOrder );
        
        matFileHeader = new MatFileHeader(description, version, endianIndicator);
    }
    /**
     * TAG operator. Facilitates reading operations.
     * <p> 
     * <i>Note: reading from buffer modifies it's position</i>
     * 
     * @author Wojciech Gradkowski (<a href="mailto:wgradkowski@gmail.com">wgradkowski@gmail.com</a>)
     */
    private static class ISMatTag extends MatTag
    {
        private final MatFileInputStream mfis;
        private final int padding;

       public ISMatTag(ByteBuffer buf)
       {
            //must call parent constructor
            super(0,0);
            int tmp = buf.getInt();
            
            //data not packed in the tag
           boolean compressed;
           if ( tmp >> 16 == 0 )
            {    
                type = tmp;
                size = buf.getInt();
                compressed = false;
            }
            else //data _packed_ in the tag (compressed)
            {
                size = tmp >> 16; // 2 more significant bytes
                type = tmp & 0xffff; // 2 less significant bytes;
                compressed = true;
            }
            padding = getPadding(size, compressed);
            mfis = new MatFileInputStream(buf, type);
        } 
        
        
        public void readToByteBuffer( ByteBuffer buff, ByteStorageSupport<?> storage )
        {
            int elements = size/sizeOf();
            mfis.readToByteBuffer( buff, elements, storage );
            mfis.skip( padding );
        }
        public byte[] readToByteArray()
        {
            //allocate memory for array elements
            int elements = size/sizeOf();
            byte[] ab = new byte[elements];
            
            for ( int i = 0; i < elements; i++ )
            {
                ab[i] = mfis.readByte();
            }
            
            //skip padding
            mfis.skip( padding );
            return ab;
        }
        public double[] readToDoubleArray()
        {
            //allocate memory for array elements
            int elements = size/sizeOf();
            double[] ad = new double[elements];
            
            for ( int i = 0; i < elements; i++ )
            {
                ad[i] = mfis.readDouble();
            }
            
            //skip padding
            mfis.skip( padding );
            return ad;
        }
        public int[] readToIntArray()
        {
            //allocate memory for array elements
            int elements = size/sizeOf();
            int[] ai = new int[elements];
            
            for ( int i = 0; i < elements; i++ )
            {
                ai[i] = mfis.readInt();
            }
            
            //skip padding
            mfis.skip( padding );
            return ai;
        }

         private String charset(ByteOrder byteOrder)
         {
            switch(type)
            {
               case MatDataTypes.miUTF8:
                  return "UTF-8";
               case MatDataTypes.miUTF16:
                  return byteOrder == ByteOrder.BIG_ENDIAN ? "UTF-16BE" : "UTF-16LE";
               case MatDataTypes.miUTF32:
                  return byteOrder == ByteOrder.BIG_ENDIAN ? "UTF-32BE" : "UTF-32LE";
               default:
                  return "US-ASCII";
            }
         }

        public String readToString(ByteOrder byteOrder) throws IOException
        {
            byte[] bytes = readToByteArray();
            return new String( bytes, charset(byteOrder));
        }
        
        @SuppressWarnings("unused")
        public char[] readToCharArray()
        {
            //allocate memory for array elements
            int elements = size/sizeOf();
            char[] ac = new char[elements];
            
            for ( int i = 0; i < elements; i++ )
            {
                ac[i] = mfis.readChar();
            }
            
            //skip padding
            mfis.skip( padding );
            return ac;
        }
    }
}
