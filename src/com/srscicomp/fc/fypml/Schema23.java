package com.srscicomp.fc.fypml;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

import com.srscicomp.common.xml.BasicSchemaElement;
import com.srscicomp.common.xml.ISchema;
import com.srscicomp.common.xml.SchemaElementInfo;
import com.srscicomp.common.xml.XMLException;

/**
 * <b>Schema23</b> is the encapsulation of the <i>FypML</i> figure model XML schema version 23. It extends {@link 
 * Schema22} and includes support for migrating schema version 22 documents to version 23. This version was first 
 * introduced with version 5.2.0 of <i>FigureComposer</i>.
 * 
 * <p><i>Summary of schema changes</i>.
 * <ul> 
 *    <li>(Jun 2019, for app V5.2.0) Renamed the "zaxis" element as "colorbar", which more accurately reflects its
 *    usage. As of 5.1.4, a colorbar can appear in any of the 3 defined graph containers. Requires changing the tag
 *    name of existing "zaxis" elements during schema migration.</li>
 *    <li>(Jun 2019, for app V5.2.0) Introduced support for a colorbar in a 3D graph by adding the "colorbar" element
 *    as an 11th required component of "graph3d". Removed the "cmap" attribute from "graph3d", copying its value during
 *    schema migration to the "cmap" attribute of the added "colorbar" element. The axis range for the colorbar is 
 *    initialized to match the 3D graph's Z axis range. Also, if the Z axis has at least one tick set, the colorbar 
 *    will have one tick set with the same range and interval. The colorbar remains hidden, of course, since it did
 *    not exist in the prior schema!</li>
 *    <li>(Jun 2019, for app V5.2.0) Modified the "scatter3d" node to support 3D bar plots. Added two display modes:
 *    (1) A single-color bar plot filled and stroked IAW the draw properties defined on the "scatter3d" node. (2) A
 *    color-mapped bar plot in which the vertical bar faces are painted with a linear color gradient reflecting the
 *    Z-coordinate range spanned by each bar, IAW the parent graph's colormap. Added the "barWidth" property to 
 *    specify the size of the square 3D bar XY cross-section as a percentage of the X-axis extent in 3D; it is limited
 *    to [1..20]. Also added the "fillColor" property to specify the fill color for the single-color bar plot</li>
 *    <li>[Apr 2020, for app V5.2.1) Introduced a new data set format, <i>xyzwset</i>, representing a set of points 
 *    (X,Y,Z,W) in 4D space. The "scatter3d" node is the only node that can present a 4D data set; the W-coordinate
 *    controls the size and/or fill color of the marker at (X,Y,Z) in the "bubble" modes.</li>
 *    <li>[May 2020, for app V5.2.1] Added an additional display mode option, <i>normhist</i>, for the <i>raster</i>
 *    node. In this mode, bar height reflects the N/T, where N is the number of samples in the relevant bin and T is
 *    the total number of samples across the data set.</li>
 *    <li>[May 2020, for app V5.2.1] Added "boxColor" and "border" properties to the "legend" element to support a
 *    "boxed" legend appearance. Their default values are "none" and "0in", respectively -- so that existing figures
 *    (including ones saved under this schema) are unaffected.</li>
 *    <li>[July 2020, for app V5.2.2] Regression bug fix: When "colorbar" replaced "zaxis" element, failed to update
 *    logic to check attribute values. The "edge" and "cmode" attributes are validated in Schema9 but only if the 
 *    element tag is "zaxis". (All other colorbar attributes are validated without checking the element tag.)
 *    <li>[Sep 2020, for app V5.2.3] Added new attribute "scale" to "axis" and "colorbar" elements. It sets the "axis
 *    power scale factor, a base-10 integer exponent N that defaults to 0. If non-zero, any tick mark labels are scaled
 *    by 10^N and the token "(x1EN)" is appended to the axis label. In some situations, this can make a cleaner, more
 *    compact presentation. The scale factor was introduced as an automated feature in V5.2.1, but we decided instead
 *    to make it user-selectable. Existing figures generated by V5.2.1 or later could be affected because the 
 *    automated scaling feature was removed in V5.2.3. Does not affect schema migration.</li>
 * </ul>
 * </p>
 * 
 * @author  sruffner
 */
class Schema23 extends Schema22
{
   @Override public String getNamespaceUri() { return("http://www.keck.ucsf.edu/datanav/namespace/schema23"); }
   @Override public int getVersion() { return(23); }
   @Override public String getLastApplicationVersion() { return("5.3.0"); }

   /** New tag name for the color bar/axis element, replacing {@link #EL_ZAXIS}. */
   final static String EL_COLORBAR = "colorbar";
   
   /** New display mode for {@link #EL_SCATTER3D}: A single-color 3D bar plot. */
   final static String MODE_SCATTER3D_BAR = "barPlot";
   /** New display mode for {@link #EL_SCATTER3D}: A color-mapped 3D bar plot. */
   final static String MODE_SCATTER3D_CBAR = "colorBarPlot";
   /** The set of choices for the "scatter3d" element's display mode, including the two new bar plot display modes. */
   final static String[] MODE_SCATTER3D_CHOICES = {
      MODE_SCATTER_XY, MODE_SCATTER_SIZE, MODE_SCATTER_COLOR, MODE_SCATTER_COLORSZ, MODE_SCATTER3D_BAR, 
      MODE_SCATTER3D_CBAR
   };

   /** Default bar size (int %-age of 3D X-axis extent) for a {@link #EL_SCATTER3D} element. */
   final static String DEFAULT_SCAT3D_BARWIDTH = "1";
   /** Minimum bar size (int %-age of 3D X-axis extent) of a 3D scatter plot element. */
   final static int MIN_SCAT3D_BARW = 1;
   /** Maximum bar size (int %-age of 3D X-axis extent) for a 3D scatter plot element. */
   final static int MAX_SCAT3D_BARW = 20;

   /** New data format introduced in schema 23: A list of 4D points. Rendered only by the "scatter3d" element. */
   final static String SETFMT_XYZWSET = "xyzwset";
   
   /** Choices for a "set" element's "fmt" attribute, including the new format introduced in schema version 23. */
   final static String[] SETFMT_CHOICES_V23 = {
      SETFMT_PTS_V7, SETFMT_SERIES_V7, SETFMT_MSET_V7, SETFMT_MSERIES_V7, SETFMT_RASTER1D, SETFMT_XYZIMG, 
      SETFMT_XYZSET, SETFMT_XYZWSET
   };

   /** New display mode for the "raster" element: Relative probability histogram. */
   final static String MODE_RASTER_NORMHIST = "normhist";
   
   /** Revised set of choices for the "raster" element's display mode (the "mode" attribute). */
   final static String[] MODE_RASTER_CHOICES_V23 = {
      MODE_RASTER_TRAINS, MODE_RASTER_TRAINS2, MODE_RASTER_HIST, MODE_RASTER_NORMHIST, MODE_RASTER_PDF, MODE_RASTER_CDF
   };

   /** New attribute: Power-of-10 axis scaling factor for an axis or colorbar. Integer exponent N scales by 10^N. */
   final static String A_SCALE = "scale";
   /** Default value for the {@link #A_SCALE} attribute of an axis or colorbar. */
   final static String DEFAULT_SCALE = "0";
   /** Minimum allowed value for the power-of-10 axis scaling factor for an axis or colorbar.  */
   final static int MIN_SCALE = -99;
   /** Minimum allowed value for the power-of-10 axis scaling factor for an axis or colorbar. */
   final static int MAX_SCALE = 99;
   
   /**
    * This element map contains {@link SchemaElementInfo} objects for each element that is new to this schema or has a 
    * different attribute set compared to the previous schema.
    */
   private static final Map<String, SchemaElementInfo> elementMap23;

   static
   {
      elementMap23 = new HashMap<>();
      
      // 07jun2019: The "zaxis" element renamed as "colorbar". The "colorbar" element added as a required component of
      // the "graph3d" element. During schema migration, the "colorbar" element is added to each existing "graph3d"
      // element, and the colorbar's "cmap" attribute is set to the value of the "cmap" attribute removed from the
      // "graph3d" parent.
      // 18sep2020: Added new "scale" attribute.
      elementMap23.put( EL_COLORBAR, new SchemaElementInfo( false, 
            new String[] {EL_TICKS}, 
            new String[] {A_FONT, A_PSFONT_V7, A_ALTFONT, A_FONTSIZE, A_FONTSTYLE, A_FILLCOLOR, A_STROKEWIDTH, 
                          A_STROKECAP, A_STROKEJOIN, A_STROKECOLOR, A_HIDE, A_TITLE, A_SPACER, A_LABELOFFSET, A_START,
                          A_END, A_GAP, A_SIZE, A_EDGE, A_CMAP, A_CMODE, A_CMAPNAN, A_LINEHT, A_SCALE}, 
            new String[] {A_START, A_END} ));
      
      elementMap23.put( EL_GRAPH, new SchemaElementInfo( false, 
            new String[] {EL_AXIS, EL_COLORBAR, EL_GRIDLINE, EL_LEGEND, EL_CALIB, EL_LABEL, EL_TEXTBOX, EL_LINE, 
                          EL_SHAPE, EL_IMAGE, EL_GRAPH, EL_PGRAPH, EL_FUNCTION, EL_TRACE, EL_RASTER, EL_CONTOUR, 
                          EL_BAR, EL_SCATTER, EL_AREA, EL_PIE}, 
            new String[] {A_FONT, A_PSFONT_V7, A_ALTFONT, A_FONTSIZE, A_FONTSTYLE, A_FILLCOLOR, A_STROKEWIDTH, 
                          A_STROKECAP, A_STROKEJOIN, A_STROKECOLOR, A_STROKEPAT, A_ROTATE, A_TITLE, A_TYPE, A_LAYOUT, 
                          A_CLIP, A_AUTORANGE, A_ID, A_BOXCOLOR, 
                          A_LOC, A_WIDTH, A_HEIGHT}, 
            new String[] {A_LOC, A_WIDTH, A_HEIGHT} ));

      elementMap23.put( EL_PGRAPH, new SchemaElementInfo( false, 
            new String[] {EL_PAXIS, EL_COLORBAR, EL_LEGEND, EL_LABEL, EL_TEXTBOX, EL_LINE, EL_SHAPE,
                          EL_IMAGE, EL_FUNCTION, EL_TRACE, EL_RASTER, EL_SCATTER, EL_AREA, EL_PIE}, 
            new String[] {A_FONT, A_PSFONT_V7, A_ALTFONT, A_FONTSIZE, A_FONTSTYLE, A_FILLCOLOR, A_STROKEWIDTH, 
                          A_STROKECAP, A_STROKEJOIN, A_STROKECOLOR, A_STROKEPAT, A_TITLE, A_CLIP, A_ID, A_BOXCOLOR, 
                          A_GRIDONTOP, A_LOC, A_WIDTH, A_HEIGHT}, 
            new String[] {A_LOC, A_WIDTH, A_HEIGHT} ));

      elementMap23.put( EL_GRAPH3D, new SchemaElementInfo( false, 
            new String[] {EL_AXIS, EL_GRIDLINE, EL_BACK3D, EL_LEGEND, EL_COLORBAR, EL_LABEL, EL_LINE, EL_SHAPE, 
                          EL_TEXTBOX, EL_IMAGE, EL_SCATTER3D, EL_SURFACE}, 
            new String[] {A_FONT, A_PSFONT_V7, A_ALTFONT, A_FONTSIZE, A_FONTSTYLE, A_FILLCOLOR, A_STROKEWIDTH, 
                          A_STROKECAP, A_STROKEJOIN, A_STROKECOLOR, A_STROKEPAT, 
                          A_ROTATE, A_ELEVATE, A_TITLE, A_ID, A_BACKDROP, A_PSCALE,
                          A_LOC, A_WIDTH, A_HEIGHT, A_DEPTH}, 
            new String[] {A_LOC, A_WIDTH, A_HEIGHT, A_DEPTH} ));
      
      // 27jun2019: Added "fillColor" and "barWidth" properties to "scatter3d"
      elementMap23.put( EL_SCATTER3D, new SchemaElementInfo( false, 
            new String[] {EL_SYMBOL}, 
            new String[] {A_FILLCOLOR, A_STROKEWIDTH, A_STROKECAP, A_STROKEJOIN, A_STROKECOLOR, A_STROKEPAT, A_TITLE, 
                          A_LEGEND, A_MODE, A_BASELINE, A_BKG, A_STEMMED, A_DOTSIZE, A_DOTCOLOR, A_BARWIDTH, A_SRC}, 
            new String[] {A_SRC} ));
      
      // 14may2020: Added "boxColor" and "border" attributes to "legend" element. Default values are "none" and
      // "0in", respectively, ensuring that existing figures are unaffected.
      elementMap23.put( EL_LEGEND, 
            new SchemaElementInfo( false, 
               new String[] {}, 
               new String[] {A_FONT, A_PSFONT_V7, A_ALTFONT, A_FONTSIZE, A_FONTSTYLE, A_FILLCOLOR, 
                             A_ROTATE, A_SPACER, A_SIZE, A_LEN, A_MID, A_HIDE, A_LABELOFFSET, 
                             A_BOXCOLOR, A_BORDER, A_LOC}, 
               new String[] {A_LOC} ));
      
      // 18sep2020: Added new "scale" attribute.
      elementMap23.put( EL_AXIS, new SchemaElementInfo( false, 
            new String[] {EL_TICKS}, 
            new String[] {A_FONT, A_PSFONT_V7, A_ALTFONT, A_FONTSIZE, A_FONTSTYLE, A_FILLCOLOR, A_STROKEWIDTH, 
                          A_STROKECAP, A_STROKEJOIN, A_STROKECOLOR, A_HIDE, A_UNITS, A_TITLE, A_SPACER, 
                          A_LABELOFFSET, A_START, A_END, A_LOG2, A_LINEHT, A_LOG, A_SCALE}, 
            new String[] {A_START, A_END} ));

   }
   
   /**
    * Overridden to recognize any elements added and exclude any elements removed in this schema version; else defers 
    * to the superclass implementation. Note that the <i>zaxis</i> element is deprecated in v23; it has been renamed
    * as the <i>colorbar</i> element.
    */
   @Override public boolean isSupportedElementTag(String elTag)
   {
      if(EL_ZAXIS.equals(elTag)) return(false);
      return(elementMap23.containsKey(elTag) || super.isSupportedElementTag(elTag));
   }

   /**
    * Overridden to provide schema element information for any element class added or revised in this schema version; 
    * for all other element classes, it defers to the superclass implementation. 
    */
   @Override public SchemaElementInfo getSchemaElementInfo(String elTag)
   {
      SchemaElementInfo info = elementMap23.get(elTag);
      return( (info==null) ? super.getSchemaElementInfo(elTag) : info);
   }

   /** 
    * Enforces any requirements on the children content of elements that were introduced or revised in schema version 
    * 23. For all other element classes, it defers to the superclass implementation.
    * <ul>
    * <li>The <i>graph3d</i> element now has a <i>colorbar</i> as a required element, making 11 total required
    * components, in the following order: 3 <i>axis</i>, 3 <i>gridline</i>, 3 <i>back3d</i>, one <i>legend</i>, and
    * one <i>colorbar</i>.</li>
    * </ul>
    */
   @SuppressWarnings("rawtypes")
   @Override public boolean hasRequiredChildren(BasicSchemaElement e)
   {
      String elTag = e.getTag();
      List children = e.getElementContent();
      if(EL_GRAPH3D.equals(elTag))
      {
         boolean ok = children.size() >= 11;
         for(int i=0; ok && i<10; i++) 
            ok = isValidChildAtIndex(e, ((BasicSchemaElement) children.get(i)).getTag(), i);
         return(ok);
      }
      
      return(super.hasRequiredChildren(e));
   }

   /** 
    * Enforces the following requirements on elements introduced in schema version 23:
    * <ul>
    * <li>The <i>graph3d</i> element now requires 11 children in this order: 3 <i>axis</i>, 3 <i>gridline</i>, 
    * 3 <i>back3d</i>, one <i>legend</i>, and one <i>colorbar</i>.</li>
    * <li>The <i>pgraph</i> element has four required children, in the following order: <i>paxis</i>, <i>paxis</i>,
    * <i>colorbar</i>, and <i>legend</i>.</li>
    * <li>The <i>graph</i> element has six required children in the following order: axis, axis, colorbar, gridline, 
    * gridline, legend.</li>
    * </ul>
    */
   @Override public boolean isValidChildAtIndex(BasicSchemaElement e, String childTag, int index)
   {
      String elTag = e.getTag();
      SchemaElementInfo eInfo = getSchemaElementInfo(elTag);
      if(!eInfo.isChildAllowed(childTag)) return(false);
      if(EL_GRAPH.equals(elTag))
      {
         if(EL_AXIS.equals(childTag)) return(index == 0 || index == 1);
         else if(EL_COLORBAR.equals(childTag)) return(index == 2);
         else if(EL_GRIDLINE.equals(childTag)) return(index == 3 || index == 4);
         else if(EL_LEGEND.equals(childTag)) return(index == 5);
         else return(index > 5);
      }
      else if(EL_GRAPH3D.equals(elTag))
      {
         if(EL_AXIS.equals(childTag)) return(index >=0 && index <= 2);
         else if(EL_GRIDLINE.equals(childTag)) return(index >= 3 && index <= 5);
         else if(EL_BACK3D.equals(childTag)) return(index >= 6 && index <= 8);
         else if(EL_LEGEND.equals(childTag)) return(index == 9);
         else if(EL_COLORBAR.equals(childTag)) return(index == 10);
         else return(index > 10);
      }
      else if(EL_PGRAPH.equals(elTag))
      {
         if(EL_PAXIS.equals(childTag)) return(index >= 0 && index <= 1);
         else if(EL_COLORBAR.equals(childTag)) return(index == 2);
         else if(EL_LEGEND.equals(childTag)) return(index == 3);
         else return(index > 3);
      }

      return(super.isValidChildAtIndex(e, childTag, index));
   }
   
   /**
    * Checks whether or not an attribute's value is valid for the specified owner element in this schema. The method 
    * defers to the super class, with the following exceptions:
    * <ul>
    * <li>The <i>mode</i> attribute of the <i>scatter3d</i> element must be one of the possible choices listed in
    * {@link #MODE_SCATTER3D_CHOICES}.</li><li>
    * <li>The <i>barWidth</i> attribute of the <i>scatter3d</i> element must an integer-valued attribute restricted to
    * the range [{@link #MIN_SCAT3D_BARW} .. {@link #MAX_SCAT3D_BARW}].</li>
    * <li>The <i>fmt</i> attribute of the <i>set</i> element is an enumerated attribute value that now allows one
    * additional value -- for the new "xyzwset" format.</li>
    * <li>The enumerated <i>mode</i> attribute of the <i>raster</i> now has an additional option. The revised list of
    * choices is in {@link #MODE_RASTER_CHOICES_V23}.</li>
    * <li><i>Regression bug from V5.2.0 fixed</i>: When the "zaxis" was renamed "colorbar", two attributes were no 
    * longer validated because validation required checking the element tag -- see Schema9. Those two attributes are
    * now checked here WITHOUT checking the element tag (they only apply to color bars).</li>
    * <li>The new <i>scale</i> attribute for an <i>axis</i> or <i>colorbar</i> must be an integer-valued attribute
    * restricted to the range {@link #MIN_SCALE} .. {@link #MAX_SCALE}. It only applies to those two elements.</li>
    * </ul>
    * 
    * NOTE that the newly added attributes of a <i>legend</i> -- <i>border</i> and <i>boxColor</i> -- were defined in 
    * earlier schemas and are validated by those schemas.
    */
   @Override public boolean isValidAttributeValue(BasicSchemaElement e, String attr, String value)
   {
      String tag = e.getTag();
      if(EL_SCATTER3D.equals(tag))
      {
         if(A_MODE.equals(attr)) return(isValidEnumAttributeValue(value, MODE_SCATTER3D_CHOICES));
         if(A_BARWIDTH.equals(attr)) return(isValidIntegerAttributeValue(value, MIN_SCAT3D_BARW, MAX_SCAT3D_BARW));
      }
      if(EL_SET.equals(tag) && A_FMT.equals(attr))
         return(isValidEnumAttributeValue(value, SETFMT_CHOICES_V23));
      if(EL_RASTER.equals(tag) && A_MODE.equals(attr)) 
         return(isValidEnumAttributeValue(value, MODE_RASTER_CHOICES_V23));

      // bug fix -- see header comments
      if(A_EDGE.equals(attr)) return(isValidEnumAttributeValue(value, EDGE_CHOICES));
      if(A_CMODE.equals(attr)) return(isValidEnumAttributeValue(value, CMODE_CHOICES));

      if(A_SCALE.equals(attr)) return(isValidIntegerAttributeValue(value, MIN_SCALE, MAX_SCALE));
       
      return(super.isValidAttributeValue(e, attr, value));
   }
   
   /**
    * This method handles the actual details of migrating from the previous schema version to this one. It makes the
    * following changes:
    * <ul>
    * <li>Any <i>zaxis</i> element encountered is migrated to the new <i>colorbar</i> element, which involves only a
    * tag name change. No attributes were added or removed.</li>
    * <li>For each <i>graph3d</i> element encountered: the element's <i>cmap</i> attribute is removed and a new 
    * <i>colorbar</i> element is added as the 11th child. The colorbar's <i>cmap</i> attribute is set accordingly, and
    * its <i>start</i> and <i>end</i> attribute values are set to match the 3D graph's Z axis range. All other 
    * attribute values are implicit; this ensures the colorbar will be hidden initially, which should be the default
    * since a 3D graph colorbar did not exist in the prior schema! If the 3D graph's Z axis has at least one tick set,
    * we add a single tick set to the colorbar with the same range and interval as the first Z axis tick set.</li>
    * 
    * </ul>
    */
   public void migrateFromPreviousSchema(ISchema oldSchema) throws XMLException
   {
      if(oldSchema.getVersion() != getVersion() - 1) 
         throw new XMLException("A schema instance can only migrate from the previous version.");

      // update the content of the old schema in place...
      Stack<BasicSchemaElement> elementStack = new Stack<>();
      elementStack.push((BasicSchemaElement) oldSchema.getRootElement());
      while(!elementStack.isEmpty())
      {
         BasicSchemaElement e = elementStack.pop();
         String elTag = e.getTag();
         
         // for each graph3d, remove the 'cmap' attribute and remember its value (if explicit)
         String cmapGraph3D = null;
         if(EL_GRAPH3D.equals(elTag))
         {
            cmapGraph3D = e.getAttributeValueByName(A_CMAP);
            e.removeAttributeByName(A_CMAP);
         }
         
         // migrate the element object's schema info: Replace each zaxis node with a colorbar node; no properties are 
         // changed; only the tag name.
         boolean isZAxis = EL_ZAXIS.equals(elTag);
         e.updateSchema(this, isZAxis ? EL_COLORBAR : null);
         
         // after updating schema element info, insert the required colorbar as the 11th child in each 3D graph 
         // encountered. If the 3D graph's removed "cmap" attribute had an explicit value, set that value on the 
         // colorbar's "cmap" attribute. Set the colorbar's "start" and "end" to match the 3D graph's Z axis range.
         // Also, if the Z axis has at least one tick set, add a tick set to the colorbar with the same range and 
         // interval as the first Z axis tick set.
         if(EL_GRAPH3D.equals(elTag))
         {
            
            BasicSchemaElement colorbar = (BasicSchemaElement) createElement(EL_COLORBAR);
            if(cmapGraph3D != null) colorbar.setAttributeValueByName(A_CMAP, cmapGraph3D);
            BasicSchemaElement axisZ = (BasicSchemaElement) e.getChildAt(2);
            colorbar.setAttributeValueByName(A_START, axisZ.getAttributeValueByName(A_START));
            colorbar.setAttributeValueByName(A_END, axisZ.getAttributeValueByName(A_END));
            
            // if 3D graph's Z axis has at least one tick set, add one tick set to colorbar with the same range and
            // tick mark interval (all required attributes on a 3D axis).
            if(axisZ.getChildCount() > 0)
            {
               BasicSchemaElement ticks = (BasicSchemaElement) axisZ.getChildAt(0);
               BasicSchemaElement cbarTicks = (BasicSchemaElement) createElement(EL_TICKS);
               cbarTicks.setAttributeValueByName(A_START, ticks.getAttributeValueByName(A_START));
               cbarTicks.setAttributeValueByName(A_END, ticks.getAttributeValueByName(A_END));
               cbarTicks.setAttributeValueByName(A_INTV, ticks.getAttributeValueByName(A_INTV));
               colorbar.insert(cbarTicks, 0);
            }
            e.insert(colorbar, 10);
         }

         
         // if element has any children, push them onto the stack so that we check them as well! We don't push on any 
         // child that was added during migration of the parent, since it will already conform to current schema.
         for(int i=0; i<e.getChildCount(); i++)
         {
            BasicSchemaElement child = (BasicSchemaElement) e.getChildAt(i);
            if(EL_GRAPH3D.equals(elTag) && EL_COLORBAR.equals(child.getTag())) continue;
            elementStack.push(child);
         }
     }
      
      // the content model now conforms to this schema. We get the root element from the old schema and install it as 
      // the root of this schema, then empty the old schema. We also remember the original schema version of the 
      // migrated content.
      originalVersion = oldSchema.getOriginalVersion();
      setRootElement(oldSchema.getRootElement(), false);
      oldSchema.setRootElement(null, false);
   }
}
